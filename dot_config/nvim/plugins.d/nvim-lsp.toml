[[plugins]]
repo = 'neovim/nvim-lspconfig'
lazy = true
on_event = 'FileType'
hooks_file = '$DEIN_CONFIG_DIR/nvim-lspconfig.lua'

[[plugins]]
repo = 'folke/neodev.nvim'
lazy = true
on_source = 'nvim-lspconfig'
lua_source = '''
  require('neodev').setup {
    library = {
      enabled = true,
      runtime = true,
      types = true,
      plugins = true,
    },
    setup_jsonls = true,
    lspconfig = true,
  }
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
lazy = true
on_cmd = ['Mason', 'MasonInstall']
lua_source = '''
  -- ~/.cache/nvim/ が存在しないとエラーになる
  local cache_dir = vim.fn.stdpath 'cache'
  if 0 == vim.fn.isdirectory(cache_dir) then
    os.execute(('mkdir %s'):format(cache_dir))
  end
  require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
lazy = true
depends = 'mason.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require('mason-lspconfig').setup()
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
lazy = true
on_event = 'LspAttach'
lua_source = '''
  require('fidget').setup {}
'''

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
lazy = true
depends = 'plenary.nvim'
on_event = ['BufReadPost', 'BufNewFile']
lua_source = '''
  local null_ls = require 'null-ls'
  null_ls.setup {
    sources = {
      null_ls.builtins.formatting.stylua,
      null_ls.builtins.formatting.csharpier,
      null_ls.builtins.diagnostics.shellcheck.with {
        extra_args = function(params)
          return params.ft == 'PKGBUILD' and { '--excluded', 'SC2148,SC2034,SC2154,SC2155,SC2164' } or {}
        end,
        extra_filetypes = { 'PKGBUILD' }
      },
      null_ls.builtins.diagnostics.markdownlint,
    },
  }
'''

# 使ってない変数を暗くハイライトしてくれる
[[plugins]]
repo = 'zbirenbaum/neodim'
lazy = true
on_event = 'LspAttach'
lua_source = '''
  require('neodim').setup {
    alpha = 0.75,
    blend_color = '#000000',
    update_in_insert = {
      enable = true,
      delay = 100,
    },
    hide = {
      virtual_text = true,
      signs = true,
      underline = true,
    },
  }
'''

# winbarに class->function->if みたいな現在のカーソル位置のコンテキストを表示する
[[plugins]]
repo = 'SmiteshP/nvim-navic'
lazy = false
lua_add = '''
  vim.api.nvim_create_autocmd('LspAttach', {
    group = 'VimRc',
    callback = function(ctx)
      local client = vim.lsp.get_client_by_id(ctx.data.client_id)
      if client.server_capabilities.documentSymbolProvider then
        require('nvim-navic').attach(client, ctx.buf)
      end
    end,
  })
'''
