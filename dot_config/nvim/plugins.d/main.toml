# プラグインマネージャー
[[plugins]]
repo = 'Shougo/dein.vim'
lazy = false

# <C-j>/<C-k> でparagraphの境界に飛べたりして便利
[[plugins]]
repo = 'haya14busa/vim-edgemotion'
lazy = true
on_map = '<Plug>(edgemotion-'
hook_add = '''
  Keymap nxo <C-j> <Plug>(edgemotion-j)
  Keymap nxo <C-k> <Plug>(edgemotion-k)
'''

# f/tを良い感じにしてくれる
[[plugins]]
repo = 'hrsh7th/vim-eft'
lazy = true
on_map = '<Plug>(eft-'
hook_add = '''
  Keymap nxo f <Plug>(eft-f)
  Keymap nxo F <Plug>(eft-F)
  Keymap xo  t <Plug>(eft-t)
  Keymap xo  T <Plug>(eft-T)
  Keymap nxo ; <Plug>(eft-repeat)
  let g:eft_ignorecase = v:true
'''

# 検索をeasymotion的に使えるようにしてくれるやつ
# 検索の入力文字列->クエリを変換するための関数を自分で定義できるので
# 便利かもしれない
# n/Nの動作が怪しい
[[plugins]]
repo = 'hrsh7th/vim-searchx'
lazy = true
on_func = 'searchx#'
hooks_file = '$DEIN_CONFIG_DIR/vim-searchx.vim'
hook_add = '''
  Keymap nx / <Cmd>call searchx#start(#{ dir: 1 })<CR>
  Keymap nx ? <Cmd>call searchx#start(#{ dir: 0 })<CR>
'''

# * でジャンプしないようにしてくれるやつ
[[plugins]]
repo = 'haya14busa/vim-asterisk'
lazy = true
on_map = '<Plug>(asterisk-'
hook_add = '''
  Keymap nxo *  <Plug>(asterisk-z*)
  Keymap nxo #  <Plug>(asterisk-z#)
  Keymap nxo g* <Plug>(asterisk-zg*)
  Keymap nxo g# <Plug>(asterisk-zg#)
'''

# カーソルのある位置に対応する括弧をハイライトしたりしてくれる
# 入れただけみたいなとこある よくわかってない
[[plugins]]
repo = 'andymass/vim-matchup'
lazy = true
on_map = '<Plug>(matchup-%)'
hook_add = '''
  let g:loaded_matchit = v:true
  let g:loaded_matchparen = v:true
  let g:matchup_matchparen_offscreen = #{
        \ method: 'status_manual',
        \ }
  Keymap nxo % <Plug>(matchup-%)
'''
hook_post_source = '''
  iunmap <C-g>%
'''

# Vimプラグインをdenoで書けるようにするやつ
[[plugins]]
repo = 'vim-denops/denops.vim'
# plugin/ディレクトリを持つが、これはVimEnterまでに読み込みたいのでfalse
lazy = false

# Migemo
[[plugins]]
repo = 'lambdalisue/kensaku.vim'
lazy = true
depends = 'denops.vim'
on_func = 'kensaku#query'

# yankしたときに範囲をわかりやすくしてくれる
[[plugins]]
repo = 'machakann/vim-highlightedyank'
lazy = true
on_map = '<Plug>(highlightedyank)'
hook_add = '''
  Keymap nxo y <Plug>(highlightedyank)
  let g:highlightedyank_highlight_duration = 200
'''

# テキストの周りを囲んだり囲みを編集したり
[[plugins]]
repo = 'machakann/vim-sandwich'
lazy = true
on_map = { nx = '<Plug>(sandwich-', xo = '<Plug>(textobj-sandwich-' }
hook_add = '''
  Keymap nx s   <Nop>
  Keymap nx sa  <Plug>(sandwich-add)
  Keymap nx sd  <Plug>(sandwich-delete)
  Keymap nx sdb <Plug>(sandwich-delete-auto)
  Keymap nx sr  <Plug>(sandwich-replace)
  Keymap nx srb <Plug>(sandwich-replace-auto)

  Keymap xo ib <Plug>(textobj-sandwich-auto-i)
  Keymap xo ab <Plug>(textobj-sandwich-auto-a)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
lazy = false

[[plugins]]
repo = 'kana/vim-textobj-entire'
lazy = true
depends = 'vim-textobj-user'
on_map = { xo = '<Plug>(textobj-entire-' }
hook_add = '''
  Keymap xo ie <Plug>(textobj-entire-i)
  Keymap xo ae <Plug>(textobj-entire-a)
'''

[[plugins]]
repo = 'kana/vim-operator-user'
lazy = false

[[plugins]]
repo = 'kana/vim-operator-replace'
lazy = true
depends = 'vim-operator-user'
on_map = { nx = '<Plug>(operator-replace)' }
hook_add = '''
  Keymap nx r <Plug>(operator-replace)
'''

# gciで行をコメントアウトできて便利
[[plugins]]
# repo = 'tyru/caw.vim'
repo = 'KentoOgata/caw.vim'
rev = 'fix/treesitter-hl_map-removed'
depends = 'vim-operator-user'
on_map = { nx = '<Plug>(caw:' }
hook_add = '''
  let g:caw_no_default_keymappings = 1

  Keymap nx gc <Plug>(caw:prefix)
  Keymap nx <Plug>(caw:prefix)i   <Plug>(caw:hatpos:comment)
  Keymap nx <Plug>(caw:prefix)ui  <Plug>(caw:hatpos:uncomment)
  Keymap nx <Plug>(caw:prefix)I   <Plug>(caw:zeropos:comment)
  Keymap nx <Plug>(caw:prefix)uI  <Plug>(caw:zeropos:uncomment)
  Keymap nx <Plug>(caw:prefix)a   <Plug>(caw:dollarpos:comment)
  Keymap nx <Plug>(caw:prefix)ua  <Plug>(caw:dollarpos:uncomment)
  Keymap nx <Plug>(caw:prefix)w   <Plug>(caw:wrap:comment)
  Keymap nx <Plug>(caw:prefix)uw  <Plug>(caw:wrap:uncomment)
  Keymap nx <Plug>(caw:prefix)b   <Plug>(caw:box:comment)
  Keymap nx <Plug>(caw:prefix)o   <Plug>(caw:jump:comment-next)
  Keymap nx <Plug>(caw:prefix)O   <Plug>(caw:jump:comment-prev)
  nmap <Plug>(caw:prefix)c <Plug>(caw:wrap:toggle:operator)
  xmap <Plug>(caw:prefix)c <Plug>(caw:hatpos:toggle)
'''

# 関数の引数の順番を入れ替えたりする
[[plugins]]
repo = 'machakann/vim-swap'
lazy = true
on_map = { nxo = '<Plug>(swap-' }
hook_add = '''
  nmap g< <Plug>(swap-prev)
  nmap g> <Plug>(swap-next)
  nmap gs <Plug>(swap-interactive)
  Keymap xo is <Plug>(swap-textobject-i)
  Keymap xo as <Plug>(swap-textobject-a)
'''

# denops製のskkプラグイン
[[plugins]]
repo  = 'vim-skk/skkeleton'
depends = 'denops.vim'
lazy = true
# 辞書の読み込みを待機しない
denops_wait = false
on_map = { ic = '<Plug>(skkeleton-enable)' }
hook_add = '''
  Keymap ic <C-j> <Plug>(skkeleton-enable)
'''
hooks_file = '$DEIN_CONFIG_DIR/skkeleton.lua'

# QuickFixの項目を一気に置換できる
[[plugins]]
repo = 'thinca/vim-qfreplace'
lazy = true
on_cmd = 'Qfreplace'

# QuickFixから項目をddで消したりできる
[[plugins]]
repo = 'itchyny/vim-qfedit'
lazy = true
on_ft = 'qf'

# chezmoiで管理してるファイル dot_* にftをあてたりする
[[plugins]]
repo = 'alker0/chezmoi.vim'
lazy = false

[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'
on_func = 'vital#vital#'

# Vim/Neovim にいつ機能が入ったのかを確認できる
[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

# :mes とかの内容をバッファーに展開できる
[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

# インデント位置にルーラーみたいなの表示してくれる
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ['BufNewFile', 'BufReadPost']
hook_add = '''
  let g:indentLine_fileTypeExclude = [
        \ 'lspinfo',
        \ 'packer',
        \ 'checkhealth',
        \ 'help',
        \ 'man',
        \ 'fern',
        \ ]
'''

# vim.ui.selectとかvim.ui.inputの良い感じの設定を提供する
[[plugins]]
repo = 'stevearc/dressing.nvim'
depends = 'nui.nvim'
on_event = 'CursorMoved'
hooks_file = '$DEIN_CONFIG_DIR/dressing.nvim.lua'

# 日本語help
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
lazy = true
merged = false
hook_add = '''
set helplang=ja,en
'''

# 選択範囲をChatGPTに投げつける
[[plugins]]
repo = 'yuki-yano/ai-review.nvim'
depends = ['denops.vim', 'nui.nvim']
on_cmd = 'AiReview'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
lazy = true

[[plugins]]
repo = 'hrsh7th/nvim-gtd'
lazy = true
on_map = '<Plug>(gtd:'
hook_add = '''
  nmap gfH <Plug>(gtd:splitleft)
  nmap gfJ <Plug>(gtd:splitbelow)
  nmap gfK <Plug>(gtd:splitabove)
  nmap gfL <Plug>(gtd:splitright)
'''
hooks_file = '$DEIN_CONFIG_DIR/nvim-gtd.lua'

# p で貼り付ける内容をヤンク履歴から選べる
[[plugins]]
repo = 'hrsh7th/nvim-pasta'
lazy = true
on_lua = 'pasta'
hook_add = '''
  nmap p <Cmd>lua require('pasta.mappings').p()<CR>
  nmap P <Cmd>lua require('pasta.mappings').P()<CR>
'''
lua_source = '''
  require('pasta').setup {
    converters = {
      require('pasta.converters').indentation,
    },
    paste_mode = true,
    prevent_diagnostics = false,
    next_key = vim.api.nvim_replace_termcodes('<C-p>', true, true, true),
    prev_key = vim.api.nvim_replace_termcodes('<C-n>', true, true, true),
  }
'''

# <C-w><C-w>したときにどこのWindowに飛ぶか選べる
[[plugins]]
repo = 'tkmpypy/chowcho.nvim'
lazy = true
on_lua = 'chowcho'
hooks_file = '$DEIN_CONFIG_DIR/chowcho.nvim.lua'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
lazy = true

[[plugins]]
repo = 'MunifTanjim/nui.nvim'
lazy = true

[[plugins]]
repo = 'onsails/lspkind-nvim'
lazy = true

[[plugins]]
repo = 'rebelot/heirline.nvim'
depends = 'nvim-web-devicons'
on_event = ['FileType', 'WinNew']
hooks_file = '$DEIN_CONFIG_DIR/heirline.nvim.lua'

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_event = ['BufReadPre', 'BufNewFile']

# カラーピッカー
# バッファー上のカラーコードをハイライト(こっちがメインで入れてる)
[[plugins]]
repo = 'uga-rosa/ccc.nvim'
lazy = true
on_cmd = ['CccPick', 'CccHighlighterEnable']
on_map = { i = '<Plug>(ccc-insert)' }
on_event = ['BufReadPost', 'FileType']
hook_add = '''
  imap <C-v>c <Plug>(ccc-insert)
'''
lua_source = '''
  require('ccc').setup {
    highlighter = {
      auto_enable = true,
      lsp = true,
    },
  }

  local auid = vim.api.nvim_create_autocmd('BufWinEnter', {
    group = 'VimRc',
    callback = function()
      vim.cmd.CccHighlighterEnable()
    end,
  })

  vim.api.nvim_create_user_command('CccDisableAutoHighlight', function()
    vim.api.nvim_del_autocmd(auid)
  end, {})
'''
hook_post_source = '''
  CccHighlighterEnable
'''

[[plugins]]
repo = 'thinca/vim-themis'
hook_add = '''
  let $THEMIS_VIM = 'nvim'
  let $THEMIS_HOME = $'{stdpath('cache')}/dein/repos/github.com/thinca/vim-themis'
  let $PATH = $'{$PATH}:{$THEMIS_HOME}/bin'
'''

# 普通のバッファーみたいにファイルを操作できる
[[plugins]]
repo = 'stevearc/oil.nvim'
lazy = true
on_if = "isdirectory(expand('<afile>'))"
hook_add = '''
  let g:loaded_netrwPlugin = 1
'''
hooks_file = '$DEIN_CONFIG_DIR/oil.nvim.lua'

# QuickFixでマッチした部分をハイライトする
[[plugins]]
repo = 'cohama/vim-hier'
lazy = true
on_event = 'QuickFixCmdPost'
[plugins.ftplugin]
qf = '''
  " quickfixのWindowを閉じたときにハイライトを無効化する
  autocmd VimRc WinClosed <buffer>
        \ : if &l:buftype ==# 'quickfix'
        \ |   execute 'HierStop'
        \ | endif
'''

# easymotion
[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
  Keymap nxo <space>w <Cmd>FuzzyMotion<CR>
'''

# yankした内容を端末の仕様を使ってクリップボードに入れてくれる
[[plugins]]
repo = 'ojroques/vim-oscyank'
lazy = true
on_map = '<Plug>OSCYankVisual'
hook_add = '''
  xmap <space>y <Plug>OSCYankVisual
  nmap <space>p "+p
'''

[[plugins]]
repo = 'yuki-yano/lexima-alter-command.vim'
depends = 'lexima.vim'
lazy = true
on_event = 'CmdlineEnter'
hook_post_source = '''
  LeximaAlterCommand fq GhqFind
  LeximaAlterCommand fp FzfPlugins

  LeximaAlterCommand gs GinStatus
  LeximaAlterCommand gp Gin<space>push
  LeximaAlterCommand gc Gin<space>commit
  LeximaAlterCommand gf FzfLua<space>git_status
'''

# vim:ft=toml expandtab tabstop=2 shiftwidth=2
